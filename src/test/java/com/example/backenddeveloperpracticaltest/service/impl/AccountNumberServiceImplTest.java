package com.example.backenddeveloperpracticaltest.service.impl;

import com.example.backenddeveloperpracticaltest.exceptionHendler.exception.NotFoundEntityException;
import com.example.backenddeveloperpracticaltest.models.entity.AccountEntity;
import com.example.backenddeveloperpracticaltest.models.entity.AccountNumberEntity;
import com.example.backenddeveloperpracticaltest.repository.AccountNumberRepository;
import com.example.backenddeveloperpracticaltest.service.interfaces.TransferService;
import com.example.backenddeveloperpracticaltest.service.interfaces.ValidationService;
import com.example.backenddeveloperpracticaltest.util.AutoGeneratedAccountNumber;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

class AccountNumberServiceImplTest {


    private AccountNumberServiceImpl accountNumberService;

    @Mock
    private AccountNumberRepository accountNumberRepository;

    @Mock
    private TransferService transferService;

    @Mock
    private ValidationService validationService;

    @Mock
    private AutoGeneratedAccountNumber autoGeneratedAccountNumber;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        accountNumberService = new AccountNumberServiceImpl(accountNumberRepository, transferService, validationService, autoGeneratedAccountNumber);
    }

    @Test
    public void testFindById() {
        Long accountNumberId = 1L;
        AccountNumberEntity accountNumberEntity = new AccountNumberEntity();
        when(accountNumberRepository.findById(accountNumberId)).thenReturn(Optional.of(accountNumberEntity));

        AccountNumberEntity result = accountNumberService.findById(accountNumberId);

        assertSame(accountNumberEntity, result);
    }

    @Test
    public void testFindByIdNotFound() {
        Long accountNumberId = 1L;
        when(accountNumberRepository.findById(accountNumberId)).thenReturn(Optional.empty());

        assertThrows(NotFoundEntityException.class, () -> accountNumberService.findById(accountNumberId));
    }

    @Test
    public void testCreateEntity() {
        AccountEntity accountEntity = new AccountEntity();
        when(autoGeneratedAccountNumber.getAccountNumber()).thenReturn("123456");
        when(accountNumberRepository.save(any(AccountNumberEntity.class))).thenAnswer(invocation -> invocation.getArgument(0));

        AccountNumberEntity result = accountNumberService.createEntity(accountEntity);

        assertNotNull(result);
        assertEquals("123456", result.getAccountNumber());
    }

}